function cov_yvc29mrct(){var path="C:\\capstoneRestAPis\\models\\User.js";var hash="eaef9110eb929d504d425216e108e49a4750fc8a";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\capstoneRestAPis\\models\\User.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:36}},"1":{start:{line:2,column:20},end:{line:2,column:40}},"2":{start:{line:3,column:15},end:{line:3,column:32}},"3":{start:{line:5,column:19},end:{line:18,column:2}},"4":{start:{line:30,column:0},end:{line:40,column:1}},"5":{start:{line:31,column:17},end:{line:31,column:46}},"6":{start:{line:32,column:4},end:{line:38,column:5}},"7":{start:{line:33,column:21},end:{line:33,column:66}},"8":{start:{line:34,column:8},end:{line:36,column:9}},"9":{start:{line:35,column:12},end:{line:35,column:24}},"10":{start:{line:37,column:8},end:{line:37,column:42}},"11":{start:{line:39,column:4},end:{line:39,column:35}},"12":{start:{line:42,column:13},end:{line:42,column:47}},"13":{start:{line:44,column:0},end:{line:44,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:30,column:27},end:{line:30,column:28}},loc:{start:{line:30,column:59},end:{line:40,column:1}},line:30}},branchMap:{"0":{loc:{start:{line:32,column:4},end:{line:38,column:5}},type:"if",locations:[{start:{line:32,column:4},end:{line:38,column:5}},{start:{line:32,column:4},end:{line:38,column:5}}],line:32},"1":{loc:{start:{line:34,column:8},end:{line:36,column:9}},type:"if",locations:[{start:{line:34,column:8},end:{line:36,column:9}},{start:{line:34,column:8},end:{line:36,column:9}}],line:34}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"eaef9110eb929d504d425216e108e49a4750fc8a"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_yvc29mrct=function(){return actualCoverage;};}return actualCoverage;}cov_yvc29mrct();const mongoose=(cov_yvc29mrct().s[0]++,require('mongoose'));const{isEmail}=(cov_yvc29mrct().s[1]++,require('validator'));const bcrypt=(cov_yvc29mrct().s[2]++,require('bcrypt'));const userSchema=(cov_yvc29mrct().s[3]++,new mongoose.Schema({email:{type:String,required:[true,'Please enter an email'],unique:true,lowercase:[true,'The email should be in lower case letters'],validate:[isEmail,'Please enter a valid email']},password:{type:String,required:[true,'Please enter a password'],minlength:[8,'Minimum password length is 8 characters']}}));//this will be fired before the user is saved
//password hashing
// userSchema.pre('save', async function (next){
//     //generating a string to be attached to the password before hashing it
//     const salt = await bcrypt.genSalt();
//     //hashing the password
//     this.password= await bcrypt.hash(this.password, salt);
//     next();//without next the code doen's go on
// });
//static method to log users in
cov_yvc29mrct().s[4]++;userSchema.statics.login=async function(email,password){cov_yvc29mrct().f[0]++;const user=(cov_yvc29mrct().s[5]++,await this.findOne({email}));cov_yvc29mrct().s[6]++;if(user){cov_yvc29mrct().b[0][0]++;const auth=(cov_yvc29mrct().s[7]++,await bcrypt.compare(password,user.password));cov_yvc29mrct().s[8]++;if(auth){cov_yvc29mrct().b[1][0]++;cov_yvc29mrct().s[9]++;return user;}else{cov_yvc29mrct().b[1][1]++;}cov_yvc29mrct().s[10]++;throw Error('Incorrect password');}else{cov_yvc29mrct().b[0][1]++;}cov_yvc29mrct().s[11]++;throw Error('Incorrect email');};const User=(cov_yvc29mrct().s[12]++,mongoose.model('user',userSchema));cov_yvc29mrct().s[13]++;module.exports=User;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlVzZXIuanMiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJyZXF1aXJlIiwiaXNFbWFpbCIsImJjcnlwdCIsInVzZXJTY2hlbWEiLCJTY2hlbWEiLCJlbWFpbCIsInR5cGUiLCJTdHJpbmciLCJyZXF1aXJlZCIsInVuaXF1ZSIsImxvd2VyY2FzZSIsInZhbGlkYXRlIiwicGFzc3dvcmQiLCJtaW5sZW5ndGgiLCJzdGF0aWNzIiwibG9naW4iLCJ1c2VyIiwiZmluZE9uZSIsImF1dGgiLCJjb21wYXJlIiwiRXJyb3IiLCJVc2VyIiwibW9kZWwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoidTdEQWVZO3lGQWZaLEtBQU1BLENBQUFBLFFBQVEseUJBQUdDLE9BQU8sQ0FBQyxVQUFELENBQVYsQ0FBZCxDQUNBLEtBQU0sQ0FBRUMsT0FBRiwwQkFBY0QsT0FBTyxDQUFDLFdBQUQsQ0FBckIsQ0FBTixDQUNBLEtBQU1FLENBQUFBLE1BQU0seUJBQUdGLE9BQU8sQ0FBQyxRQUFELENBQVYsQ0FBWixDQUVBLEtBQU1HLENBQUFBLFVBQVUseUJBQUcsR0FBSUosQ0FBQUEsUUFBUSxDQUFDSyxNQUFiLENBQW9CLENBQ25DQyxLQUFLLENBQUUsQ0FDSEMsSUFBSSxDQUFDQyxNQURGLENBRUhDLFFBQVEsQ0FBRSxDQUFDLElBQUQsQ0FBTyx1QkFBUCxDQUZQLENBR0hDLE1BQU0sQ0FBRSxJQUhMLENBSUhDLFNBQVMsQ0FBRSxDQUFDLElBQUQsQ0FBTywyQ0FBUCxDQUpSLENBS0hDLFFBQVEsQ0FBRSxDQUFDVixPQUFELENBQVUsNEJBQVYsQ0FMUCxDQUQ0QixDQVFuQ1csUUFBUSxDQUFFLENBQ05OLElBQUksQ0FBRUMsTUFEQSxDQUVOQyxRQUFRLENBQUUsQ0FBQyxJQUFELENBQU8seUJBQVAsQ0FGSixDQUdOSyxTQUFTLENBQUUsQ0FBQyxDQUFELENBQUkseUNBQUosQ0FITCxDQVJ5QixDQUFwQixDQUFILENBQWhCLENBY0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7dUJBQ0FWLFVBQVUsQ0FBQ1csT0FBWCxDQUFtQkMsS0FBbkIsQ0FBMkIsZUFBZVYsS0FBZixDQUFzQk8sUUFBdEIsQ0FBZ0Msd0JBQ3ZELEtBQU1JLENBQUFBLElBQUkseUJBQUcsS0FBTSxNQUFLQyxPQUFMLENBQWEsQ0FBRVosS0FBRixDQUFiLENBQVQsQ0FBVixDQUR1RCx1QkFFdkQsR0FBR1csSUFBSCxDQUFTLDJCQUNMLEtBQU1FLENBQUFBLElBQUkseUJBQUcsS0FBTWhCLENBQUFBLE1BQU0sQ0FBQ2lCLE9BQVAsQ0FBZVAsUUFBZixDQUF5QkksSUFBSSxDQUFDSixRQUE5QixDQUFULENBQVYsQ0FESyx1QkFFTCxHQUFHTSxJQUFILENBQVMsa0RBQ0wsTUFBT0YsQ0FBQUEsSUFBUCxDQUNILENBRkQsZ0NBRkssd0JBS0wsS0FBTUksQ0FBQUEsS0FBSyxDQUFDLG9CQUFELENBQVgsQ0FDSCxDQU5ELGdDQUZ1RCx3QkFTdkQsS0FBTUEsQ0FBQUEsS0FBSyxDQUFDLGlCQUFELENBQVgsQ0FDSCxDQVZELENBWUEsS0FBTUMsQ0FBQUEsSUFBSSwwQkFBR3RCLFFBQVEsQ0FBQ3VCLEtBQVQsQ0FBZSxNQUFmLENBQXVCbkIsVUFBdkIsQ0FBSCxDQUFWLEMsd0JBRUFvQixNQUFNLENBQUNDLE9BQVAsQ0FBaUJILElBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xyXG5jb25zdCB7IGlzRW1haWwgfSA9IHJlcXVpcmUoJ3ZhbGlkYXRvcicpO1xyXG5jb25zdCBiY3J5cHQgPSByZXF1aXJlKCdiY3J5cHQnKTtcclxuXHJcbmNvbnN0IHVzZXJTY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hKHtcclxuICAgIGVtYWlsOiB7XHJcbiAgICAgICAgdHlwZTpTdHJpbmcsXHJcbiAgICAgICAgcmVxdWlyZWQ6IFt0cnVlLCAnUGxlYXNlIGVudGVyIGFuIGVtYWlsJ10sXHJcbiAgICAgICAgdW5pcXVlOiB0cnVlLFxyXG4gICAgICAgIGxvd2VyY2FzZTogW3RydWUsICdUaGUgZW1haWwgc2hvdWxkIGJlIGluIGxvd2VyIGNhc2UgbGV0dGVycyddLFxyXG4gICAgICAgIHZhbGlkYXRlOiBbaXNFbWFpbCwgJ1BsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsJ11cclxuICAgIH0sXHJcbiAgICBwYXNzd29yZDoge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlZDogW3RydWUsICdQbGVhc2UgZW50ZXIgYSBwYXNzd29yZCddLFxyXG4gICAgICAgIG1pbmxlbmd0aDogWzgsICdNaW5pbXVtIHBhc3N3b3JkIGxlbmd0aCBpcyA4IGNoYXJhY3RlcnMnXVxyXG4gICAgfVxyXG59KTtcclxuLy90aGlzIHdpbGwgYmUgZmlyZWQgYmVmb3JlIHRoZSB1c2VyIGlzIHNhdmVkXHJcbi8vcGFzc3dvcmQgaGFzaGluZ1xyXG4vLyB1c2VyU2NoZW1hLnByZSgnc2F2ZScsIGFzeW5jIGZ1bmN0aW9uIChuZXh0KXtcclxuLy8gICAgIC8vZ2VuZXJhdGluZyBhIHN0cmluZyB0byBiZSBhdHRhY2hlZCB0byB0aGUgcGFzc3dvcmQgYmVmb3JlIGhhc2hpbmcgaXRcclxuLy8gICAgIGNvbnN0IHNhbHQgPSBhd2FpdCBiY3J5cHQuZ2VuU2FsdCgpO1xyXG4vLyAgICAgLy9oYXNoaW5nIHRoZSBwYXNzd29yZFxyXG4vLyAgICAgdGhpcy5wYXNzd29yZD0gYXdhaXQgYmNyeXB0Lmhhc2godGhpcy5wYXNzd29yZCwgc2FsdCk7XHJcbi8vICAgICBuZXh0KCk7Ly93aXRob3V0IG5leHQgdGhlIGNvZGUgZG9lbidzIGdvIG9uXHJcbi8vIH0pO1xyXG5cclxuLy9zdGF0aWMgbWV0aG9kIHRvIGxvZyB1c2VycyBpblxyXG51c2VyU2NoZW1hLnN0YXRpY3MubG9naW4gPSBhc3luYyBmdW5jdGlvbihlbWFpbCwgcGFzc3dvcmQpIHtcclxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCB0aGlzLmZpbmRPbmUoeyBlbWFpbCB9KTtcclxuICAgIGlmKHVzZXIpIHtcclxuICAgICAgICBjb25zdCBhdXRoID0gYXdhaXQgYmNyeXB0LmNvbXBhcmUocGFzc3dvcmQsIHVzZXIucGFzc3dvcmQpO1xyXG4gICAgICAgIGlmKGF1dGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IEVycm9yKCdJbmNvcnJlY3QgcGFzc3dvcmQnKTtcclxuICAgIH1cclxuICAgIHRocm93IEVycm9yKCdJbmNvcnJlY3QgZW1haWwnKTtcclxufVxyXG5cclxuY29uc3QgVXNlciA9IG1vbmdvb3NlLm1vZGVsKCd1c2VyJywgdXNlclNjaGVtYSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFVzZXI7Il19